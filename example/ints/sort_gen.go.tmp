// THIS FILE WAS AUTOGENERATED.
// DO NOT EDIT!







package ints


 func QuickSort(data []int, lo, hi int) {
 if lo >= hi {
 return
 }
 // Quick sort partition algorithm.
 var p int
 {
 // Let x be a pivot
 x := data[lo]
 p = lo
 for i := lo + 1; i < hi; i++ {
 if data[i] <= x {
 p++
 data[p], data[i] = data[i], data[p]
 }
 }
 data[p], data[lo] = data[lo], data[p]
 }
 QuickSort(data, lo, p)
 QuickSort(data, p+1, hi)
 }

 func InsertionSort(data []int, l, r int) {
 // Insertion sort algorithm.
 for i := l + 1
 i < r
 i++ {
 for j := i
 j > l && !(data[j-1] <= data[j])
 j-- {
 data[j], data[j-1] = data[j-1], data[j]
 }
 } }

 func Sort(data []int, l, r int) {
 if r-l > 12 {
 QuickSort(data, l, r)
 return
 }
 // Insertion sort algorithm.
 for i := l + 1
 i < r
 i++ {
 for j := i
 j > l && !(data[j-1] <= data[j])
 j-- {
 data[j], data[j-1] = data[j-1], data[j]
 }
 }
 }

 func Search(data []int, key int) (int, bool) {
 // Binary search algorithm.
 var ok bool
 var i int
 {
 l := 0
 r := len(data)
 for !ok && l < r {
 m := l + (r-l)/2
 switch {
 case data[m] == key:
 ok = true
 r = m
 case data[m] < key:
 l = m + 1
 case data[m] > key:
 r = m
 }
 }
 i = r
 _ = i // in case when i not being used
 }
 return i, ok
 }


