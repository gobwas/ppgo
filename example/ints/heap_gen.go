// THIS FILE WAS AUTOGENERATED.
// DO NOT EDIT!

package ints

type Heap struct {
	d    int
	data []int
}

func NewHeap(d int) *Heap {
	return &Heap{
		d: d,
	}
}

func NewHeapFromSlice(data []int, d int) *Heap {
	h := &Heap{
		d:    d,
		data: data,
	}
	for i := len(h.data)/h.d - 1; i >= 0; i-- {
		h.siftDown(i)
	}
	return h
}

func (h *Heap) Top() int {
	return h.data[0]
}

func (h *Heap) Pop() int {
	n := len(h.data)
	ret := h.data[0]
	h.data[0], h.data[n-1] = h.data[n-1], h.data[0]
	h.data[n-1] = 0
	h.data = h.data[:n-1]
	h.siftDown(0)
	return ret
}

func (h *Heap) Insert(x int) {
	i := len(h.data)
	if cap(h.data) == len(h.data) {
		h.data = append(h.data, x)
	} else {
		h.data = h.data[:i+1]
		h.data[i] = x
	}
	h.siftUp(i)
}

func (h *Heap) Heapify() {
	for i := len(h.data)/h.d - 1; i >= 0; i-- {
		h.siftDown(i)
	}
}

func (h *Heap) Slice() []int {
	cp := *h
	cp.data = make([]int, len(h.data))
	copy(cp.data, h.data)
	ret := h.data
	for i := 0; i < len(cp.data)-1; i++ {
		cp.data = cp.data[1:]
		cp.siftDown(0)
	}
	return ret
}

func (h *Heap) Data() []int { return h.data }
func (h *Heap) Len() int    { return len(h.data) }

func (h Heap) siftDown(root int) {
	for {
		min := root
		for i := 1; i <= h.d; i++ {
			child := h.d*root + i
			if child >= len(h.data) { // out of bounds
				break
			}
			if !(h.data[min] <= h.data[child]) {
				min = child
			}
		}
		if min == root {
			return
		}
		h.data[root], h.data[min] = h.data[min], h.data[root]
		root = min
	}
}

func (h Heap) siftUp(root int) {
	for root > 0 {
		parent := (root - 1) / h.d
		if h.data[root] <= h.data[parent] {
			return
		}
		h.data[parent], h.data[root] = h.data[root], h.data[parent]
		root = parent
	}
}

func (h Heap) siftTop(root int) {
	for root > 0 {
		parent := (root - 1) / h.d
		h.data[parent], h.data[root] = h.data[root], h.data[parent]
		root = parent
	}
}
